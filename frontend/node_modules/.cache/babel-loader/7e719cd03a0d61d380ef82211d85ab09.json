{"ast":null,"code":"var _jsxFileName = \"C:\\\\M306\\\\buildspace-nft-course-starter-main\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport { ethers } from \"ethers\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport myEpicNft from './utils/MyEpicNFT.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '@CopVsThiev';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// eslint-disable-next-line\nconst OPENSEA_LINK = '';\n// eslint-disable-next-line\nconst TOTAL_MINT_COUNT = 50;\nconst App = () => {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const checkIfWalletIsConnected = async () => {\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n    const accounts = await ethereum.request({\n      method: 'eth_accounts'\n    });\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // eslint-disable-next-line\n  const askContractToMintNft = async () => {\n    const CONTRACT_ADDRESS = \"0xBC46c3E1BB01e0A68768b183d663F9d735b9119d\";\n    try {\n      const {\n        ethereum\n      } = window;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        console.log(`Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}`);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Render Methods\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"Cops vs Thieves Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today and kill eachother.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: null,\n          className: \"cta-button connect-wallet-button\",\n          children: \"Mint NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built on ${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","myEpicNft","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","setupEventListener","connectWallet","alert","error","provider","providers","Web3Provider","signer","getSigner","connectedContract","Contract","CONTRACT_ADDRESS","abi","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","renderNotConnectedContainer","twitterLogo"],"sources":["C:/M306/buildspace-nft-course-starter-main/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport { ethers } from \"ethers\";\nimport twitterLogo from './assets/twitter-logo.svg';\nimport myEpicNft from './utils/MyEpicNFT.json';\n\n\nconst TWITTER_HANDLE = '@CopVsThiev';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n// eslint-disable-next-line\nconst OPENSEA_LINK = '';\n// eslint-disable-next-line\nconst TOTAL_MINT_COUNT = 50;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  \n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n            const account = accounts[0];\n            console.log(\"Found an authorized account:\", account);\n            setCurrentAccount(account);\n\n            // Setup listener! This is for the case where a user comes to our site\n            // and ALREADY had their wallet connected + authorized.\n            setupEventListener();\n        } else {\n            console.log(\"No authorized account found\");\n        }\n    };\n\n\n  const connectWallet = async () => {\n        try {\n            const { ethereum } = window;\n\n            if (!ethereum) {\n                alert(\"Get MetaMask!\");\n                return;\n            }\n\n            const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n            console.log(\"Connected\", accounts[0]);\n            setCurrentAccount(accounts[0]);\n\n            // Setup listener! This is for the case where a user comes to our site\n            // and connected their wallet for the first time.\n            setupEventListener();\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n     // Setup our listener.\n    const setupEventListener = async () => {\n        // Most of this looks the same as our function askContractToMintNft\n        try {\n            const { ethereum } = window;\n\n            if (ethereum) {\n                // Same stuff again\n                const provider = new ethers.providers.Web3Provider(ethereum);\n                const signer = provider.getSigner();\n                const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n                // THIS IS THE MAGIC SAUCE.\n                // This will essentially \"capture\" our event when our contract throws it.\n                // If you're familiar with webhooks, it's very similar to that!\n                connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n                    console.log(from, tokenId.toNumber());\n                    alert(\n                        `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n                    );\n                });\n\n                console.log(\"Setup event listener!\");\n            } else {\n                console.log(\"Ethereum object doesn't exist!\");\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n  // eslint-disable-next-line\n  const askContractToMintNft = async () => {\n  const CONTRACT_ADDRESS = \"0xBC46c3E1BB01e0A68768b183d663F9d735b9119d\";\n\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        console.log(\"Going to pop wallet now to pay gas...\")\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\")\n        await nftTxn.wait();\n        \n        console.log(`Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}`);\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n  \n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">Cops vs Thieves Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today and kill eachother.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button onClick={null} className=\"cta-button connect-wallet-button\">\n              Mint NFT\n            </button>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on ${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}